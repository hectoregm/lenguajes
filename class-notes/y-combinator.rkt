#lang plai

;; Taken from http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2012/09/y.html

(define man-fac-w/o-recursion-0-1
    (lambda (n)
      (cond ((= n 0) 1)
            ((= n 1) 1)
            (else (* n (error (- n 1)))))))

(test (man-fac-w/o-recursion-0-1 0) 1)
(test (man-fac-w/o-recursion-0-1 1) 1)

(define man-fac-w/o-recursion-0-2
    (lambda (n)
      ((lambda (fact)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (fact (- n 1))))))
       (lambda (n)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (error (- n 1)))))))))
(test (man-fac-w/o-recursion-0-2 0) 1)
(test (man-fac-w/o-recursion-0-2 1) 1)
(test (man-fac-w/o-recursion-0-2 2) 2)

(define man-fac-w/o-recursion-0-3
    (lambda (n)
      ((lambda (fact)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (fact (- n 1))))))
       ((lambda (fact)
          (lambda (n)
            (cond ((= n 0) 1)
                  ((= n 1) 1)
                  (else (* n (fact (- n 1)))))))
        (lambda (n)
           (cond ((= n 0) 1)
                 ((= n 1) 1)
                 (else (* n (error (- n 1))))))))))
(test (man-fac-w/o-recursion-0-3 0) 1)
(test (man-fac-w/o-recursion-0-3 1) 1)
(test (man-fac-w/o-recursion-0-3 2) 2)
(test (man-fac-w/o-recursion-0-3 3) 6)

(define man-fac-w/o-recursion-0-5
    (lambda (n)
      ((lambda (fact)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (fact (- n 1))))))
       ((lambda (fact)
          (lambda (n)
            (cond ((= n 0) 1)
                  ((= n 1) 1)
                  (else (* n (fact (- n 1)))))))
        ((lambda (fact)
           (lambda (n)
             (cond ((= n 0) 1)
                   ((= n 1) 1)
                   (else (* n (fact (- n 1)))))))
         ((lambda (fact)
            (lambda (n)
              (cond ((= n 0) 1)
                    ((= n 1) 1)
                    (else (* n (fact (- n 1)))))))
          (lambda (n)
            (cond ((= n 0) 1)
                  ((= n 1) 1)
                  (else (* n (error (- n 1))))))))))))
(test (man-fac-w/o-recursion-0-5 0) 1)
(test (man-fac-w/o-recursion-0-5 1) 1)
(test (man-fac-w/o-recursion-0-5 2) 2)
(test (man-fac-w/o-recursion-0-5 3) 6)
(test (man-fac-w/o-recursion-0-5 4) 24)
(test (man-fac-w/o-recursion-0-5 5) 120)

(define mk-fact
  (lambda (fact)
    (lambda (n)
      (cond
        [(= n 0) 1]
        [(= n 1) 1]
        [else (* n (fact (- n 1)))]))))
(test ((mk-fact error) 0) 1)
(test ((mk-fact error) 1) 1)
(test ((mk-fact (mk-fact error)) 2) 2)

(define man-fac-with-mk-recursion-0-5-a
    (lambda (n)
      ((lambda (fact)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (fact (- n 1))))))
       ((lambda (fact)
          (lambda (n)
            (cond ((= n 0) 1)
                  ((= n 1) 1)
                  (else (* n (fact (- n 1)))))))
        ((lambda (fact)
           (lambda (n)
             (cond ((= n 0) 1)
                   ((= n 1) 1)
                   (else (* n (fact (- n 1)))))))
         ((lambda (fact)
            (lambda (n)
              (cond ((= n 0) 1)
                    ((= n 1) 1)
                    (else (* n (fact (- n 1)))))))
          (mk-fact error)))))))
(test (man-fac-with-mk-recursion-0-5-a 0) 1)
(test (man-fac-with-mk-recursion-0-5-a 1) 1)
(test (man-fac-with-mk-recursion-0-5-a 2) 2)
(test (man-fac-with-mk-recursion-0-5-a 3) 6)
(test (man-fac-with-mk-recursion-0-5-a 4) 24)
(test (man-fac-with-mk-recursion-0-5-a 5) 120)


(define man-fac-with-mk-recursion-0-5-b
    (lambda (n)
      ((lambda (fact)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (fact (- n 1))))))
       ((lambda (fact)
          (lambda (n)
            (cond ((= n 0) 1)
                  ((= n 1) 1)
                  (else (* n (fact (- n 1)))))))
        ((lambda (fact)
           (lambda (n)
             (cond ((= n 0) 1)
                   ((= n 1) 1)
                   (else (* n (fact (- n 1)))))))
         ((lambda (fact)
            (mk-fact fact))
          (mk-fact error)))))))
(test (man-fac-with-mk-recursion-0-5-b 0) 1)
(test (man-fac-with-mk-recursion-0-5-b 1) 1)
(test (man-fac-with-mk-recursion-0-5-b 2) 2)
(test (man-fac-with-mk-recursion-0-5-b 3) 6)
(test (man-fac-with-mk-recursion-0-5-b 4) 24)
(test (man-fac-with-mk-recursion-0-5-b 5) 120)


(define man-fac-with-mk-recursion-0-5-c
    (lambda (n)
      ((lambda (fact)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (fact (- n 1))))))
       ((lambda (fact)
          (lambda (n)
            (cond ((= n 0) 1)
                  ((= n 1) 1)
                  (else (* n (fact (- n 1)))))))
        ((lambda (fact)
           (mk-fact fact))
         ((lambda (fact)
            (mk-fact fact))
          (mk-fact error)))))))
(test (man-fac-with-mk-recursion-0-5-c 0) 1)
(test (man-fac-with-mk-recursion-0-5-c 1) 1)
(test (man-fac-with-mk-recursion-0-5-c 2) 2)
(test (man-fac-with-mk-recursion-0-5-c 3) 6)
(test (man-fac-with-mk-recursion-0-5-c 4) 24)
(test (man-fac-with-mk-recursion-0-5-c 5) 120)

(define man-fac-with-mk-recursion-0-5-e
    ((lambda (fact)
       (mk-fact fact))
     ((lambda (fact)
        (mk-fact fact))
      ((lambda (fact)
         (mk-fact fact))
       ((lambda (fact)
          (mk-fact fact))
        (mk-fact error))))))
(test (man-fac-with-mk-recursion-0-5-e 0) 1)
(test (man-fac-with-mk-recursion-0-5-e 1) 1)
(test (man-fac-with-mk-recursion-0-5-e 2) 2)
(test (man-fac-with-mk-recursion-0-5-e 3) 6)
(test (man-fac-with-mk-recursion-0-5-e 4) 24)
(test (man-fac-with-mk-recursion-0-5-e 5) 120)

(define man-fac-with-mk-recursion-0-5-i
    (mk-fact
     (mk-fact
      (mk-fact
       (mk-fact
        (mk-fact error))))))
(test (man-fac-with-mk-recursion-0-5-i 0) 1)
(test (man-fac-with-mk-recursion-0-5-i 1) 1)
(test (man-fac-with-mk-recursion-0-5-i 2) 2)
(test (man-fac-with-mk-recursion-0-5-i 3) 6)
(test (man-fac-with-mk-recursion-0-5-i 4) 24)
(test (man-fac-with-mk-recursion-0-5-i 5) 120)

(define man-fac-with-mk-Y-recursion
  ((lambda (mk-fact)
     (mk-fact mk-fact))
   (lambda (mk-fact)
     (lambda (n)
       (cond ((= n 0) 1)
             ((= n 1) 1)
             (else (* n ((mk-fact mk-fact) (- n 1)))))))))
(test (man-fac-with-mk-Y-recursion 0) 1)
(test (man-fac-with-mk-Y-recursion 1) 1)
(test (man-fac-with-mk-Y-recursion 2) 2)
(test (man-fac-with-mk-Y-recursion 3) 6)
(test (man-fac-with-mk-Y-recursion 4) 24)
(test (man-fac-with-mk-Y-recursion 5) 120)

(define man-fac-with-mk-Y-recursion-b
    ((lambda (mk-fact)
       (mk-fact mk-fact))
     (lambda (mk-fact)
       ((lambda (factorial)
          (lambda (n)
            (cond ((= n 0) 1)
                  ((= n 1) 1)
                  (else (* n (factorial (- n 1)))))))
        (lambda (x)
          ((mk-fact mk-fact) x))))))
(test (man-fac-with-mk-Y-recursion-b 0) 1)
(test (man-fac-with-mk-Y-recursion-b 1) 1)
(test (man-fac-with-mk-Y-recursion-b 2) 2)
(test (man-fac-with-mk-Y-recursion-b 3) 6)
(test (man-fac-with-mk-Y-recursion-b 4) 24)
(test (man-fac-with-mk-Y-recursion-b 5) 120)

(define man-fac-with-mk-Y-recursion-c
    ((lambda (le)
       ((lambda (mk-fact)
          (mk-fact mk-fact))
        (lambda (mk-fact)
          (le (lambda (x) ((mk-fact mk-fact) x))))))
     (lambda (factorial)
       (lambda (n)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (factorial (- n 1)))))))))
(test (man-fac-with-mk-Y-recursion-c 0) 1)
(test (man-fac-with-mk-Y-recursion-c 1) 1)
(test (man-fac-with-mk-Y-recursion-c 2) 2)
(test (man-fac-with-mk-Y-recursion-c 3) 6)
(test (man-fac-with-mk-Y-recursion-c 4) 24)
(test (man-fac-with-mk-Y-recursion-c 5) 120)


(define man-fac-with-mk-Y-recursion-d
    ((lambda (le)
       ((lambda (f)
          (f f))
        (lambda (f)
          (le (lambda (x) ((f f) x))))))
     (lambda (factorial)
       (lambda (n)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (factorial (- n 1)))))))))
(test (man-fac-with-mk-Y-recursion-d 0) 1)
(test (man-fac-with-mk-Y-recursion-d 1) 1)
(test (man-fac-with-mk-Y-recursion-d 2) 2)
(test (man-fac-with-mk-Y-recursion-d 3) 6)
(test (man-fac-with-mk-Y-recursion-d 4) 24)
(test (man-fac-with-mk-Y-recursion-d 5) 120)

(define Y
    (lambda (le)
      ((lambda (f)
         (f f))
       (lambda (f)
         (le (lambda (x) ((f f) x)))))))

(define Y-combinator-recursion-factorial
    (Y
     (lambda (factorial)
       (lambda (n)
         (cond ((= n 0) 1)
               ((= n 1) 1)
               (else (* n (factorial (- n 1)))))))))
(test (Y-combinator-recursion-factorial 0) 1)
(test (Y-combinator-recursion-factorial 1) 1)
(test (Y-combinator-recursion-factorial 2) 2)
(test (Y-combinator-recursion-factorial 3) 6)
(test (Y-combinator-recursion-factorial 4) 24)
(test (Y-combinator-recursion-factorial 5) 120)





